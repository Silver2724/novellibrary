{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\diya2\\\\novellibrary\\\\novellibrary\\\\frontend\\\\src\\\\components\\\\Search.js\",\n  _s = $RefreshSig$();\n// import { useState } from \"react\";\n// import SearchBar from \"./SearchBar\";\n// import SearchResults from \"./SearchResults\";\n// import \"./Search.css\";\n\n// export default function Search() {\n//     const[results, setResults] = useState([]);\n//     const[library, setLibrary] = useState([]);\n//     //const [query, setQuery] = useState(\"\");\n//     //const user = JSON.parse(localStorage.getItem(\"user\")); \n\n//     // const handleSearch = async (query) => {\n//     //     //call backend APi here\n//     //     try {\n//     //         if(!user) {\n//     //             alert(\"Please log in to search your library.\");\n//     //             return;\n//     //         }\n\n//     //         const res = await fetch(`http://localhost:8080/api/search?q=${encodeURIComponent(query)}`);\n//     //         const data = await res.json();\n//     //         setResults(data);\n//     //     } catch (err) {\n//     //         console.error(\"Search failed: \", err);\n//     //     }\n//     // };\n\n//     const handleSearch = async (query) => {\n//         //call backend APi here\n//         try {\n//             const res = await fetch(`http://localhost:8080/api/search?q=${encodeURIComponent(query)}`);\n//             const data = await res.json();\n//             setResults(data);\n//         } catch (err) {\n//             console.error(\"Search failed: \", err)\n//         }\n//     };\n\n//     // const handleAdd = async (novel) => {\n//     //     try {\n//     //         if(!user) {\n//     //         alert(\"Please log in to add books\");\n//     //             return;\n//     //         }\n\n//     //         const res = await fetch(`http://localhost:8080/api/novels/${user.email}/add`, {\n//     //             method: \"POST\",\n//     //             headers: { \"Content-Type\": \"application-json\"},\n//     //             body: JSON.stringify(novel)\n//     //         });\n\n//     //         if(!res.ok) throw new Error(\"Failed to add book.\");\n//     //         const saved = await res.json();\n//     //         alert(`\"${saved.title}\" has been added to your library!`);\n\n//     //         setLibrary((prev) => [...prev, saved]);\n//     //     } catch (err) {\n//     //         console.error(\"Add failed: \", err);\n//     //         alert(\"Failed to add book. Please try again.\");\n//     //     }\n//     // }\n\n//     const handleSave = async (novel) => {\n//         try {\n//             const res = await fetch(`http://localhost:8080/api/novels/#{userId}`, {\n//                 method: \"POST\",\n//                 headers: {\"Content-Type\": \"application/json\"},\n//                 body: JSON.stringify(novel),\n//             });\n\n//             if(!res.ok) {\n//                 throw new Error(\"Failed to save novel.\");\n//             }\n\n//             const saved = await res.json();\n//             console.log(\"Saved to library: \", saved);\n\n//             alert(`Saved \"${saved.title}\" to your library!`);\n\n//             setLibrary((prev) => {\n//                 if(prev.find((n) => n.title === novel.title && n.author === novel.author)) {\n//                     return prev;\n//                 }\n//                 return [...prev, novel];\n//             });\n//         } catch (err) {\n//             console.error(\"Save failed: \", err);\n//             alert(`Failed to save novel. Please try again.`);\n//         }\n\n//         console.log(\"Saving novel: \", novel);\n//     };\n\n//     return (\n//         <div>\n//             <h1 className=\"title\">Search Novels</h1>\n//             <SearchBar onSearch={handleSearch} query={query} setQuery={setQuery}/>\n//             <SearchResults results={results} onSave={handleSave}/>          \n//         </div>\n//         // <div>\n//         //     <h2>Search</h2>\n//         //         <input\n//         //         type=\"text\"\n//         //         placeholder=\"Search by title\"\n//         //         value={query}\n//         //         onChange={(e) => setQuery(e.target.value)}\n//         //     />\n//         //     <button onClick={handleSearch}>Search</button>\n\n//         //     <ul>\n//         //         {results.map((novel) => (\n//         //         <li key={novel.id}>\n//         //             {novel.title} by {novel.author}\n//         //             <button onClick={() => handleAdd(novel)}>Add</button>\n//         //         </li>\n//         //         ))}\n//         //     </ul>\n//         // </div> \n//     );\n// }\n\nimport { useEffect, useState } from \"react\";\nimport SearchBar from \"./SearchBar\";\nimport SearchResults from \"./SearchResults\";\nimport \"./Search.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Search() {\n  _s();\n  const [results, setResults] = useState([]);\n  const [library, setLibrary] = useState([]);\n  const handleSearch = async query => {\n    //call backend APi here\n    try {\n      const res = await fetch(`http://localhost:8080/api/search?q=${encodeURIComponent(query)}`);\n      const data = await res.json();\n      setResults(data);\n    } catch (err) {\n      console.error(\"Search failed: \", err);\n    }\n  };\n  const handleSave = async novel => {\n    try {\n      const res = await fetch(`http://localhost:8080/api/novels`, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(novel)\n      });\n      if (!res.ok) {\n        throw new Error(\"Failed to save novel.\");\n      }\n      const saved = await res.json();\n      console.log(\"Saved to library: \", saved);\n      alert(`Saved \"${saved.title}\" to your library!`);\n      setLibrary(prev => {\n        if (prev.find(n => n.title === novel.title && n.author === novel.author)) {\n          return prev;\n        }\n        return [...prev, novel];\n      });\n    } catch (err) {\n      console.error(\"Save failed: \", err);\n      alert(`Failed to save novel. Please try again.`);\n    }\n    console.log(\"Saving novel: \", novel);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"title\",\n      children: \"Search Novels\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(SearchBar, {\n      onSearch: handleSearch\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 176,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(SearchResults, {\n      results: results,\n      onSave: handleSave\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 174,\n    columnNumber: 9\n  }, this);\n}\n_s(Search, \"n2zTc8mL1UdZL32bb1YgbC763jc=\");\n_c = Search;\nvar _c;\n$RefreshReg$(_c, \"Search\");","map":{"version":3,"names":["useEffect","useState","SearchBar","SearchResults","jsxDEV","_jsxDEV","Search","_s","results","setResults","library","setLibrary","handleSearch","query","res","fetch","encodeURIComponent","data","json","err","console","error","handleSave","novel","method","headers","body","JSON","stringify","ok","Error","saved","log","alert","title","prev","find","n","author","children","className","fileName","_jsxFileName","lineNumber","columnNumber","onSearch","onSave","_c","$RefreshReg$"],"sources":["C:/Users/diya2/novellibrary/novellibrary/frontend/src/components/Search.js"],"sourcesContent":["// import { useState } from \"react\";\r\n// import SearchBar from \"./SearchBar\";\r\n// import SearchResults from \"./SearchResults\";\r\n// import \"./Search.css\";\r\n\r\n// export default function Search() {\r\n//     const[results, setResults] = useState([]);\r\n//     const[library, setLibrary] = useState([]);\r\n//     //const [query, setQuery] = useState(\"\");\r\n//     //const user = JSON.parse(localStorage.getItem(\"user\")); \r\n\r\n//     // const handleSearch = async (query) => {\r\n//     //     //call backend APi here\r\n//     //     try {\r\n//     //         if(!user) {\r\n//     //             alert(\"Please log in to search your library.\");\r\n//     //             return;\r\n//     //         }\r\n\r\n//     //         const res = await fetch(`http://localhost:8080/api/search?q=${encodeURIComponent(query)}`);\r\n//     //         const data = await res.json();\r\n//     //         setResults(data);\r\n//     //     } catch (err) {\r\n//     //         console.error(\"Search failed: \", err);\r\n//     //     }\r\n//     // };\r\n\r\n//     const handleSearch = async (query) => {\r\n//         //call backend APi here\r\n//         try {\r\n//             const res = await fetch(`http://localhost:8080/api/search?q=${encodeURIComponent(query)}`);\r\n//             const data = await res.json();\r\n//             setResults(data);\r\n//         } catch (err) {\r\n//             console.error(\"Search failed: \", err)\r\n//         }\r\n//     };\r\n\r\n//     // const handleAdd = async (novel) => {\r\n//     //     try {\r\n//     //         if(!user) {\r\n//     //         alert(\"Please log in to add books\");\r\n//     //             return;\r\n//     //         }\r\n\r\n//     //         const res = await fetch(`http://localhost:8080/api/novels/${user.email}/add`, {\r\n//     //             method: \"POST\",\r\n//     //             headers: { \"Content-Type\": \"application-json\"},\r\n//     //             body: JSON.stringify(novel)\r\n//     //         });\r\n\r\n//     //         if(!res.ok) throw new Error(\"Failed to add book.\");\r\n//     //         const saved = await res.json();\r\n//     //         alert(`\"${saved.title}\" has been added to your library!`);\r\n\r\n//     //         setLibrary((prev) => [...prev, saved]);\r\n//     //     } catch (err) {\r\n//     //         console.error(\"Add failed: \", err);\r\n//     //         alert(\"Failed to add book. Please try again.\");\r\n//     //     }\r\n//     // }\r\n\r\n//     const handleSave = async (novel) => {\r\n//         try {\r\n//             const res = await fetch(`http://localhost:8080/api/novels/#{userId}`, {\r\n//                 method: \"POST\",\r\n//                 headers: {\"Content-Type\": \"application/json\"},\r\n//                 body: JSON.stringify(novel),\r\n//             });\r\n\r\n//             if(!res.ok) {\r\n//                 throw new Error(\"Failed to save novel.\");\r\n//             }\r\n\r\n//             const saved = await res.json();\r\n//             console.log(\"Saved to library: \", saved);\r\n\r\n//             alert(`Saved \"${saved.title}\" to your library!`);\r\n\r\n//             setLibrary((prev) => {\r\n//                 if(prev.find((n) => n.title === novel.title && n.author === novel.author)) {\r\n//                     return prev;\r\n//                 }\r\n//                 return [...prev, novel];\r\n//             });\r\n//         } catch (err) {\r\n//             console.error(\"Save failed: \", err);\r\n//             alert(`Failed to save novel. Please try again.`);\r\n//         }\r\n    \r\n//         console.log(\"Saving novel: \", novel);\r\n//     };\r\n\r\n//     return (\r\n//         <div>\r\n//             <h1 className=\"title\">Search Novels</h1>\r\n//             <SearchBar onSearch={handleSearch} query={query} setQuery={setQuery}/>\r\n//             <SearchResults results={results} onSave={handleSave}/>          \r\n//         </div>\r\n//         // <div>\r\n//         //     <h2>Search</h2>\r\n//         //         <input\r\n//         //         type=\"text\"\r\n//         //         placeholder=\"Search by title\"\r\n//         //         value={query}\r\n//         //         onChange={(e) => setQuery(e.target.value)}\r\n//         //     />\r\n//         //     <button onClick={handleSearch}>Search</button>\r\n\r\n//         //     <ul>\r\n//         //         {results.map((novel) => (\r\n//         //         <li key={novel.id}>\r\n//         //             {novel.title} by {novel.author}\r\n//         //             <button onClick={() => handleAdd(novel)}>Add</button>\r\n//         //         </li>\r\n//         //         ))}\r\n//         //     </ul>\r\n//         // </div> \r\n//     );\r\n// }\r\n\r\nimport { useEffect, useState } from \"react\";\r\nimport SearchBar from \"./SearchBar\";\r\nimport SearchResults from \"./SearchResults\";\r\nimport \"./Search.css\";\r\n\r\nexport default function Search() {\r\n    const[results, setResults] = useState([]);\r\n    const[library, setLibrary] = useState([]);\r\n\r\n    const handleSearch = async (query) => {\r\n        //call backend APi here\r\n        try {\r\n            const res = await fetch(`http://localhost:8080/api/search?q=${encodeURIComponent(query)}`);\r\n            const data = await res.json();\r\n            setResults(data);\r\n        } catch (err) {\r\n            console.error(\"Search failed: \", err)\r\n        }\r\n    };\r\n\r\n    const handleSave = async (novel) => {\r\n        try {\r\n            const res = await fetch(`http://localhost:8080/api/novels`, {\r\n                method: \"POST\",\r\n                headers: {\"Content-Type\": \"application/json\"},\r\n                body: JSON.stringify(novel),\r\n            });\r\n\r\n            if(!res.ok) {\r\n                throw new Error(\"Failed to save novel.\");\r\n            }\r\n\r\n            const saved = await res.json();\r\n            console.log(\"Saved to library: \", saved);\r\n\r\n            alert(`Saved \"${saved.title}\" to your library!`);\r\n\r\n            setLibrary((prev) => {\r\n                if(prev.find((n) => n.title === novel.title && n.author === novel.author)) {\r\n                    return prev;\r\n                }\r\n                return [...prev, novel];\r\n            });\r\n        } catch (err) {\r\n            console.error(\"Save failed: \", err);\r\n            alert(`Failed to save novel. Please try again.`);\r\n        }\r\n    \r\n        console.log(\"Saving novel: \", novel);\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <h1 className=\"title\">Search Novels</h1>\r\n            <SearchBar onSearch={handleSearch}/>\r\n            <SearchResults results={results} onSave={handleSave}/>          \r\n        </div>    \r\n    );\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}