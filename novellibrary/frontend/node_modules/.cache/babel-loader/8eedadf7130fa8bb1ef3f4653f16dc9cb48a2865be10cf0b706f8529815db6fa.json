{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\diya2\\\\novellibrary\\\\novellibrary\\\\frontend\\\\src\\\\components\\\\Search.js\",\n  _s = $RefreshSig$();\nimport { useEffect, useState } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport SearchBar from \"./SearchBar\";\nimport SearchResults from \"./SearchResults\";\nimport \"./Search.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Search() {\n  _s();\n  const [results, setResults] = useState([]);\n  const [library, setLibrary] = useState([]);\n  const navigate = useNavigate();\n  const token = localStorage.getItem(\"token\");\n\n  //load user's library on mount\n  useEffect(() => {\n    const fetchLibrary = async () => {\n      try {\n        const res = await fetch(\"http://localhost:8080/api/novels/library\", {\n          method: \"GET\",\n          headers: {\n            \"Content-Type\": \"application/json\"\n            //\"Authorization\": `Bearer ${token}`\n          }\n        });\n        if (!res.ok) {\n          throw new Error(`Library fetch failed: ${res.status}`);\n        }\n        const data = await res.json();\n        setLibrary(data);\n      } catch (err) {\n        console.error(\"Failed to fetch library: \", err);\n      }\n    };\n    if (token) fetchLibrary();\n  }, [token, navigate]);\n\n  //search novels\n  const handleSearch = async query => {\n    try {\n      var _data$items;\n      const apiKey = process.env.REACT_APP_GOOGLE_BOOKS_API_KEY; // store in .env\n      const res = await fetch(`https://www.googleapis.com/books/v1/volumes?q=${encodeURIComponent(query)}&maxResults=10&key=${apiKey}`);\n      if (!res.ok) {\n        throw new Error(`Search failed: ${res.status}`);\n      }\n      const data = await res.json();\n      setResults(data);\n      const books = ((_data$items = data.items) === null || _data$items === void 0 ? void 0 : _data$items.map(item => {\n        const info = item.volumeInfo || {};\n        return {\n          title: info.title || \"untitled\",\n          author: info.authors || \"Unknown Author(s)\",\n          description: info.description || \"No description available\",\n          sourceURL: info.sourceURL || info.previewLink || \"\"\n        };\n      })) || [];\n      setResults(books);\n    } catch (err) {\n      console.error(\"Search failed: \", err);\n    }\n  };\n  const handleSave = async novel => {\n    try {\n      if (!token) throw new Error(\"No token found, please login\");\n      const res = await fetch(\"http://localhost:8080/api/novels/library\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          \"Authorization\": `Bearer ${token}`\n        },\n        body: JSON.stringify(novel)\n      });\n      if (!res.ok) throw new Error(\"Failed to save novel.\");\n      const saved = await res.json();\n      console.log(\"Saved to library: \", saved);\n      alert(`Saved \"${saved.title}\" to your library!`);\n    } catch (err) {\n      console.error(\"Save failed: \", err);\n      alert(\"Failed to save novel. Please try again.\");\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"title\",\n      children: \"Search Novels\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(SearchBar, {\n      onSearch: handleSearch\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(SearchResults, {\n      results: results,\n      onSave: handleSave\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 96,\n    columnNumber: 9\n  }, this);\n}\n_s(Search, \"QtIm2jwB+t1rbh5vrahy33fXYjw=\", false, function () {\n  return [useNavigate];\n});\n_c = Search;\nvar _c;\n$RefreshReg$(_c, \"Search\");","map":{"version":3,"names":["useEffect","useState","useNavigate","SearchBar","SearchResults","jsxDEV","_jsxDEV","Search","_s","results","setResults","library","setLibrary","navigate","token","localStorage","getItem","fetchLibrary","res","fetch","method","headers","ok","Error","status","data","json","err","console","error","handleSearch","query","_data$items","apiKey","process","env","REACT_APP_GOOGLE_BOOKS_API_KEY","encodeURIComponent","books","items","map","item","info","volumeInfo","title","author","authors","description","sourceURL","previewLink","handleSave","novel","body","JSON","stringify","saved","log","alert","children","className","fileName","_jsxFileName","lineNumber","columnNumber","onSearch","onSave","_c","$RefreshReg$"],"sources":["C:/Users/diya2/novellibrary/novellibrary/frontend/src/components/Search.js"],"sourcesContent":["import { useEffect, useState } from \"react\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport SearchBar from \"./SearchBar\";\r\nimport SearchResults from \"./SearchResults\";\r\nimport \"./Search.css\";\r\n\r\nexport default function Search() {\r\n    const[results, setResults] = useState([]);\r\n    const[library, setLibrary] = useState([]);\r\n    const navigate = useNavigate();\r\n\r\n    const token = localStorage.getItem(\"token\");\r\n\r\n    //load user's library on mount\r\n    useEffect(() => {\r\n        const fetchLibrary = async () => {\r\n            try {\r\n                const res = await fetch(\"http://localhost:8080/api/novels/library\", {\r\n                    method: \"GET\",\r\n                    headers: {\r\n                    \"Content-Type\": \"application/json\"\r\n                    //\"Authorization\": `Bearer ${token}`\r\n                },\r\n                });\r\n\r\n                if(!res.ok) {\r\n                    throw new Error(`Library fetch failed: ${res.status}`);\r\n                }\r\n\r\n                const data = await res.json();\r\n                setLibrary(data);\r\n            } catch (err) {\r\n                console.error(\"Failed to fetch library: \", err);\r\n            }\r\n        };\r\n        if(token) fetchLibrary();\r\n    }, [token, navigate]);\r\n\r\n    //search novels\r\n    const handleSearch = async (query) => {\r\n        try {\r\n            const apiKey = process.env.REACT_APP_GOOGLE_BOOKS_API_KEY; // store in .env\r\n            const res = await fetch(\r\n            `https://www.googleapis.com/books/v1/volumes?q=${encodeURIComponent(query)}&maxResults=10&key=${apiKey}`\r\n            );\r\n\r\n            if (!res.ok) {\r\n                throw new Error(`Search failed: ${res.status}`);\r\n            }\r\n            \r\n            const data = await res.json();\r\n            setResults(data);\r\n            const books = data.items?.map(item => {\r\n                const info = item.volumeInfo || {};\r\n                return {\r\n                    title: info.title || \"untitled\",\r\n                    author: info.authors || \"Unknown Author(s)\",\r\n                    description: info.description || \"No description available\",\r\n                    sourceURL:info.sourceURL || info.previewLink || \"\",\r\n                };\r\n            }) || [];\r\n            setResults(books);\r\n        } catch (err) {\r\n            console.error(\"Search failed: \", err)\r\n        }\r\n    };\r\n\r\n    const handleSave = async (novel) => {\r\n        try {\r\n            if (!token) throw new Error(\"No token found, please login\");\r\n\r\n            const res = await fetch(\"http://localhost:8080/api/novels/library\", {\r\n                method: \"POST\",\r\n                headers: {\r\n                    \"Content-Type\": \"application/json\",\r\n                    \"Authorization\": `Bearer ${token}`\r\n                },\r\n                body: JSON.stringify(novel),\r\n            });\r\n\r\n            if (!res.ok) throw new Error(\"Failed to save novel.\");\r\n\r\n            const saved = await res.json();\r\n            console.log(\"Saved to library: \", saved);\r\n\r\n            alert(`Saved \"${saved.title}\" to your library!`);\r\n\r\n        } catch (err) {\r\n            console.error(\"Save failed: \", err);\r\n            alert(\"Failed to save novel. Please try again.\");\r\n        }\r\n    };\r\n\r\n\r\n    return (\r\n        <div>\r\n            <h1 className=\"title\">Search Novels</h1>\r\n            <SearchBar onSearch={handleSearch}/>\r\n            <SearchResults results={results} onSave={handleSave}/>          \r\n        </div>    \r\n    );\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}