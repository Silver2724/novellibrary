{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\diya2\\\\novellibrary\\\\novellibrary\\\\frontend\\\\src\\\\components\\\\Search.js\",\n  _s = $RefreshSig$();\nimport { useState } from \"react\";\nimport SearchBar from \"./SearchBar\";\nimport SearchResults from \"./SearchResults\";\nimport \"./Search.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Search() {\n  _s();\n  const [results, setResults] = useState([]);\n  const [library, setLibrary] = useState([]);\n  const [query, setQuery] = useState(\"\");\n  const user = JSON.parse(localStorage.getItem(\"user\"));\n  const handleSearch = async () => {\n    //call backend APi here\n    try {\n      if (!user) {\n        alert(\"Please log in to search your library.\");\n        return;\n      }\n      const res = await fetch(`http://localhost:8080/api/search?q=${encodeURIComponent(query)}`);\n      const data = await res.json();\n      setResults(data);\n    } catch (err) {\n      console.error(\"Search failed: \", err);\n    }\n  };\n  const handleAdd = async novel => {\n    try {\n      if (!user) {\n        alert(\"Please log in to add books\");\n        return;\n      }\n      const res = await fetch(`http://localhost:8080/api/novels/${user.email}/add`, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application-json\"\n        },\n        body: JSON.stringify(novel)\n      });\n      if (!res.ok) throw new Error(\"Failed to add book.\");\n      const saved = await res.json();\n      alert(`\"${saved.title}\" has been added to your library!`);\n      setLibrary(prev => [...prev, saved]);\n    } catch (err) {\n      console.error(\"Add failed: \", err);\n      alert(\"Failed to add book. Please try again.\");\n    }\n  };\n\n  // const handleSave = async (novel) => {\n  //     try {\n  //         const res = await fetch(`http://localhost:8080/api/novels/#{userId}`, {\n  //             method: \"POST\",\n  //             headers: {\"Content-Type\": \"application/json\"},\n  //             body: JSON.stringify(novel),\n  //         });\n\n  //         if(!res.ok) {\n  //             throw new Error(\"Failed to save novel.\");\n  //         }\n\n  //         const saved = await res.json();\n  //         console.log(\"Saved to library: \", saved);\n\n  //         alert(`Saved \"${saved.title}\" to your library!`);\n\n  //         setLibrary((prev) => {\n  //             if(prev.find((n) => n.title === novel.title && n.author === novel.author)) {\n  //                 return prev;\n  //             }\n  //             return [...prev, novel];\n  //         });\n  //     } catch (err) {\n  //         console.error(\"Save failed: \", err);\n  //         alert(`Failed to save novel. Please try again.`);\n  //     }\n\n  //     console.log(\"Saving novel: \", novel);\n  // };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"title\",\n      children: \"Search Novels\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(SearchBar, {\n      onSearch: handleSearch,\n      query: query,\n      setQuery: setQuery\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(SearchResults, {\n      results: results,\n      onSave: handleSave\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 84,\n    columnNumber: 9\n  }, this)\n  // <div>\n  //     <h2>Search</h2>\n  //         <input\n  //         type=\"text\"\n  //         placeholder=\"Search by title\"\n  //         value={query}\n  //         onChange={(e) => setQuery(e.target.value)}\n  //     />\n  //     <button onClick={handleSearch}>Search</button>\n\n  //     <ul>\n  //         {results.map((novel) => (\n  //         <li key={novel.id}>\n  //             {novel.title} by {novel.author}\n  //             <button onClick={() => handleAdd(novel)}>Add</button>\n  //         </li>\n  //         ))}\n  //     </ul>\n  // </div> \n  ;\n}\n_s(Search, \"0o597P1fMYSQb2orv9kjBbDRzGs=\");\n_c = Search;\nvar _c;\n$RefreshReg$(_c, \"Search\");","map":{"version":3,"names":["useState","SearchBar","SearchResults","jsxDEV","_jsxDEV","Search","_s","results","setResults","library","setLibrary","query","setQuery","user","JSON","parse","localStorage","getItem","handleSearch","alert","res","fetch","encodeURIComponent","data","json","err","console","error","handleAdd","novel","email","method","headers","body","stringify","ok","Error","saved","title","prev","children","className","fileName","_jsxFileName","lineNumber","columnNumber","onSearch","onSave","handleSave","_c","$RefreshReg$"],"sources":["C:/Users/diya2/novellibrary/novellibrary/frontend/src/components/Search.js"],"sourcesContent":["import { useState } from \"react\";\r\nimport SearchBar from \"./SearchBar\";\r\nimport SearchResults from \"./SearchResults\";\r\nimport \"./Search.css\";\r\n\r\nexport default function Search() {\r\n    const[results, setResults] = useState([]);\r\n    const[library, setLibrary] = useState([]);\r\n    const [query, setQuery] = useState(\"\");\r\n    const user = JSON.parse(localStorage.getItem(\"user\")); \r\n\r\n    const handleSearch = async () => {\r\n        //call backend APi here\r\n        try {\r\n            if(!user) {\r\n                alert(\"Please log in to search your library.\");\r\n                return;\r\n            }\r\n\r\n            const res = await fetch(`http://localhost:8080/api/search?q=${encodeURIComponent(query)}`);\r\n            const data = await res.json();\r\n            setResults(data);\r\n        } catch (err) {\r\n            console.error(\"Search failed: \", err);\r\n        }\r\n    };\r\n\r\n    const handleAdd = async (novel) => {\r\n        try {\r\n            if(!user) {\r\n            alert(\"Please log in to add books\");\r\n                return;\r\n            }\r\n\r\n            const res = await fetch(`http://localhost:8080/api/novels/${user.email}/add`, {\r\n                method: \"POST\",\r\n                headers: { \"Content-Type\": \"application-json\"},\r\n                body: JSON.stringify(novel)\r\n            });\r\n\r\n            if(!res.ok) throw new Error(\"Failed to add book.\");\r\n            const saved = await res.json();\r\n            alert(`\"${saved.title}\" has been added to your library!`);\r\n\r\n            setLibrary((prev) => [...prev, saved]);\r\n        } catch (err) {\r\n            console.error(\"Add failed: \", err);\r\n            alert(\"Failed to add book. Please try again.\");\r\n        }\r\n    }\r\n\r\n    // const handleSave = async (novel) => {\r\n    //     try {\r\n    //         const res = await fetch(`http://localhost:8080/api/novels/#{userId}`, {\r\n    //             method: \"POST\",\r\n    //             headers: {\"Content-Type\": \"application/json\"},\r\n    //             body: JSON.stringify(novel),\r\n    //         });\r\n\r\n    //         if(!res.ok) {\r\n    //             throw new Error(\"Failed to save novel.\");\r\n    //         }\r\n\r\n    //         const saved = await res.json();\r\n    //         console.log(\"Saved to library: \", saved);\r\n\r\n    //         alert(`Saved \"${saved.title}\" to your library!`);\r\n\r\n    //         setLibrary((prev) => {\r\n    //             if(prev.find((n) => n.title === novel.title && n.author === novel.author)) {\r\n    //                 return prev;\r\n    //             }\r\n    //             return [...prev, novel];\r\n    //         });\r\n    //     } catch (err) {\r\n    //         console.error(\"Save failed: \", err);\r\n    //         alert(`Failed to save novel. Please try again.`);\r\n    //     }\r\n    \r\n    //     console.log(\"Saving novel: \", novel);\r\n    // };\r\n\r\n    return (\r\n        <div>\r\n            <h1 className=\"title\">Search Novels</h1>\r\n            <SearchBar onSearch={handleSearch} query={query} setQuery={setQuery}/>\r\n            <SearchResults results={results} onSave={handleSave}/>          \r\n        </div>\r\n        // <div>\r\n        //     <h2>Search</h2>\r\n        //         <input\r\n        //         type=\"text\"\r\n        //         placeholder=\"Search by title\"\r\n        //         value={query}\r\n        //         onChange={(e) => setQuery(e.target.value)}\r\n        //     />\r\n        //     <button onClick={handleSearch}>Search</button>\r\n\r\n        //     <ul>\r\n        //         {results.map((novel) => (\r\n        //         <li key={novel.id}>\r\n        //             {novel.title} by {novel.author}\r\n        //             <button onClick={() => handleAdd(novel)}>Add</button>\r\n        //         </li>\r\n        //         ))}\r\n        //     </ul>\r\n        // </div> \r\n    );\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}